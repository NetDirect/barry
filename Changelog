Release: version 0.0.2 - 2005/??/??
------------------------------------------------------------------------------
2006/03/31
	- turned source code browsing on in Doxyfile
	- added LoadDatabaseByName() and LoadDatabaseByType() template members
		to the Controller class
		- new file: controllertmpl.h
	- documentation fixes in builder.h
	- added static GetDBName() functions to all record classes, in
		support of the template Controller functions
	- fleshed out DatabaseDatabase::GetDBNumber() and GetDBName(),
		returning errors properly
	- documented sample btool.cc code better, and added example
		of Controller template member usage
2006/03/29
	- copyright dates updated for 2006
2006/01/05
	- backed out update to latest libusb DEVEL tree, since it is buggy.
		Stick with libusb 2005/11/26
2005/12/30
	- added clean target to convenience Makefile
	- added Boost to list of dependencies in README
	- fixed minor compile warnings in base64.cc
	- fixed new USB discovery code, and changed endpoint usage to use
		it, instead of the READ_ENDPOINT and WRITE_ENDPOINT
		constants... constants are now removed
		common.h, controller.cc, probe.cc, probe.h, usbwrap.cc
	- added ClearHalt() to Usb::Device (usbwrap.cc)
	- updated usbwrap.h to match latest libusb CVS devel tree
	- updated README to refer to 2005/12/30 libusb CVS devel tree
	- added roadmap to Todo list
2005/12/29
	- added convenience Makefile in root directory
	- added Hacking document
	- minor touchups to README
	- added caution warning to README, since this release will support
		delete / overwrite / upload functionality
	- minor compile order change in Makefile (speed reasons)
	- added dynamic endpoint discovery to probe.cc
	- changed claim_interface/set_configuration() function call order in
		probe.cc based on feedback on the libusb mailing list
	- added USB discovery code to usbwrap.{h,cc}
2005/12/23
	- fixed packing bug in new upload header struct
	- renamed CommonField union from data to u to be consistent
	- added return_code field to DBAccess struct, for error checking
	- added response checking during upload: if response is non-zero
		throw exception in controller.cc
	- added sorting operators to record parser classes... when writing
		contact data to the device, it may be important to write
		group link items last, since they reference other contacts...
		This needs to be tested, and if not required, removed.
	- added GROUP_FLAG field code to Contact parser class
	- fixed offset bug in Contact and Calendar Build() functions
	- fixed name bug in Contact::Build(), now output only with data
	- added appointment type flag support to Calendar record parser
		class, and "all day event" flag support
2005/12/22
	- added autoconf to Todo list
	- refactored the protocol structures so that record structs can
		be reused for upload and download
	- with new protostructs, more header control is handled by
		controller.cc instead of record.cc parsers and builders
	- parser code now accepts an offset, to govern start of record data
	- changed Data sizes from int to size_t and removed casts
	- removed unneeded Parser::GetHeaderSize() (new protostructs make
		this obsolete)
	- added Calendar::Build() for calendar uploads
2005/12/10
	- added s11n-boost.h serialization templates for boost::serialization
	- added boost::serialization to build
	- minor change in usbwrap.cc to display error codes in decimal
	- added SizePacket special case code to Socket::Send()... this is
		required when uploaded packet size is a multiple of 0x40,
		a special 3 byte size packet is sent
	- moved some record class variables to public: so they can be
		properly serialized
	- fixed variable name but in RecordBuilder template
	- added -f switch to btool, for saving and loading of record data
	- added -s switch to btool, for uploading saved data back to handheld
	- added Controller::SaveDatabase()
2005/12/08
	- fixed potential casting / pointer bug in controller.cc
	- added builder.h, to support uploading
	- minor comment fixes in parser.h
	- added preliminary Contact protocol record building support
	- fixed field order bug in ContactRecord protocol struct
	- Contact record.h class now saves unknown Group Link field,
		for later saving
2005/12/07
	- added -fno-strict-aliasing to compiler flags so gcc-4.0.x won't
		optimize away protocol struct casts
		see: 
		http://gcc.gnu.org/bugzilla/show_bug.cgi?id=25235
		http://mail-index.netbsd.org/tech-kern/2003/08/11/0001.html
		http://groups.google.ca/group/comp.lang.c++.moderated/ \
			browse_thread/thread/e7bf096832526f8e/5714701b \
			02a2a3cc?hl=en#5714701b02a2a3cc
	- changed headers so that any low level protocol-specific sizes and
		structs are completely hidden in the library...
		this adds library-only header: protostructs.h

Release: version 0.0.1 - 2005/11/25
------------------------------------------------------------------------------
2005/11/25
	- added barry.h for documentation purposes and application usage
	- updated README for release
	- renamed SBError exception class to BError
	- updated Doxyfile to version 1.4.5
	- added more doxygen comments
2005/11/24
	- added conversion routines (and tests) between time_t and min1900_t
	- added -v option to btool to dynamically control protocol dumping
	- removed duplicated database database table display in controller.cc
	- minor spelling corrections
	- added copyright to usbwrap.{h,cc} as per earlier meeting
	- added support for Old protocol Calendar entries
2005/11/20
	- added legal.txt, to save typing when adding new source files
	- ignore test-base64 file (cvsignore)
	- added contact-to-ldif generation, and updated supporting code
	- added argument to btool to support contact-to-ldif operation
	- added Contact::GetPostalAddress()
	- added README documentation in preparation for future release
2005/11/19
	- added parser.{h,cc} virtual wrapper to generalize LoadDatabase()
	- added code to socket.cc's Packet() command to re-receive on
		reception of empty packets... this seems to be a signal
		from the device that it needs more time for long transfers
		Current limit: 10 blank packets before exception is thrown
		Observed maximum blank count: 1
	- added MessageRecord and OldMessageRecord to protocol.h
	- changed common record field structs to one CommonField struct
	- increased default USB timeout to 10 seconds (some loaded devices
		seem to need more time...)
	- reorganized record.{h,cc} to try to reduce the code duplication
	- record.h classes now "know" the sizes of their corresponding
		protocol structs... this may cause trouble down the line
		with Python, if used(?)
	- added Message class for Email records
	- removed the "Get*" database functions and replaced with
		general LoadDatabase() call, which loads any database
		available, and parses it with a Parser object
	- added GetDBID() for searching for database numbers via name
	- added test code to retrieve and display all email
	- cleaned up comments
	- renamed blackberry.{h,cc} to controller.{h,cc}
	- renamed bbtool.cc to btool.cc
	- added Makefile.conf
	- added copyright notices to source files
	- added COPYING file with GPL
	- put parser in Barry namespace, and added auto_ptr-like mode for
		store object pointers
	- added doxygen docs
	- added header comments to convo.awk script
	- removed Test() function in Controller object, and made class
		better suited to its general API purpose
	- changed OpenMode() so it loads command table and DBDB... it is now
		a public API function
	- moved Controller test code to btool.cc and made tool more
		generically useful... can now download any DB by name on
		the command line
	- added mode checks to Controller
	- added -t and -d command line options to btool
	- added base64 routines from John Walker / Fourmilab and Citadel/UX
	- converted base64 routines into an API, instead of hardcoded
		file based
2005/11/18
	- changed project name to Barry, including namespaces
	- renamed sbcommon.* to common.*
	- increased USB default timeout to 2 seconds
	- fixed formatting bug in Data operator<< output
	- cleaned up the protocol packet structs, getting rid of the
		confusing param/simple split... param is now the tableCmd
		from the Command Table
	- moved protocol structs from record.h to protocol.h
	- added support for older version of the USB protocol, which matches
		the Cassis spec more closely
	- fixed the hardcoded offsets in blackberry.cc's protocol parsing
	- fixed Socket::Close() so on error, socket flags are reset.
		This stops Close() from being called twice on exception
		destructors
2005/11/17
	- added Doxyfile to the project
	- tuned Makefile
	- added mode selection support to Blackberry class (RIM Desktop,
		RIM Bypass, and RIM_JavaLoader)
		Mode selection governs which socket is used in subsequent
		data transfers.
	- added Command Table parsing and protocol support
		Blackberry class, and CommandTable record class
	- added Database database parsing and protocol support
		Blackberry class and DatabaseDatabase record class
	- added Address book retrieval support - dumps data to stdout for now
	- fixed bug in CopyOnWrite mode in Data class, where could allocate
		less buffer than data copied
	- added "easy exception" debug output macro
	- fixed minor spelling error in protocol.cc
	- fixed ModeSelectCommand protocol structure - it is not a parameter
		command, but uses the unknown slots for socket and flag
		data
	- removed hardcoded socket numbers from protocol.h
	- fixed bug in socket.cc:Open() where packet size was not properly
		saved
	- implemented socket::Close()
	- fixed sequence number checks, so it is reset properly on socket 0
	- added Socket::NextRecord() for multiple record data transfers
	- fixed input handling bug in translate.cc
2005/11/11
	- added .cvsignore files to project
	- added README notes to document the source architecture
	- added dbsetup data script, which shows how to get into database
		mode, using the RIM Desktop mode, and open a socket
	- added blackberry.{h,cc} class
	- added command line parameters to bbtool.cc
		-l = list only
		-p = specify pin of blackberry device
	- added blackberry test code in bbtool.cc - debugging the initial
		opening protocol: sockets, modes, etc... see dbsetup for
		results
	- added copy-on-write functionality to Data class, so it can be used
		with plain data buffers with little performance impact
	- added eout() and ddout() debugging - to separate:
		- regular debug output
		- exception debug output (should probably be logged to
			syslog someday, and never turned off)
		- raw data dump output
	- changed errno SBError exception handler to try to decode the error
		numbers into english (limited success)
	- fixed probe and socket USB Bulk message handling, so they don't
		use PollCompletions(), but use IO::Wait() (libusb_io_wait())
	- added common packet size checker in protocol.cc
	- fixed unpacked protocol packet structs... using gcc's
		__attribute__ ((packed)) ... see protocol.h
	- added ModeSelectCommand structure (protocol.h)
	- finished Socket::Open() call  (Close() not yet implemented)
	- moved Socket::Send/Receive() out of private, as they can be used
		for socket 0 operations.
	- cleaned up pointer management with macros:
		MAKE_PACKET()
		COMMAND()
		IS_COMMAND()
	- added IO::Wait() and IO::Cancel() to correspond with libusb API
	- added datadumping in usbwrap for easy protocol capture
	- added preliminary record.{h,cc} classes
	- added Contact record parsing, and test code
2005/10/20
	- syncberry tree started

