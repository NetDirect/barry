
*****************************************************************************
*  CAUTION: This is alpha software.  Please make complete backups of your   *
*           Blackberry device before experimenting.  While the author has   *
*           had good success with this software, that is no guarantee that  *
*           you will.  Please make backups.                                 *
*****************************************************************************

Introduction:
-------------
Barry is a GPL C++ library to interface with USB BlackBerry handheld devices
on Linux.  This is one of Net Direct Inc.'s (http://www.netdirect.ca/)
open source projects.

The SourceForge project page can be found at:
	http://sourceforge.net/projects/barry/

Barry is currently in early development, but is reaching stages of usefulness.
For example, it is possible to retrieve Address Book contact data, and export
it in text or LDAP LDIF format.


Installation:
-------------
You need:
	libusb, devel branch	http://libusb.sourceforge.net/
	boost 1.33 (optional)	http://www.boost.org/


Boost:

Boost is needed for the serialization library, which you need if you want
to save downloads for later uploads to the device.

Libusb:

Check out the 2005/11/26 V1_0_DEVEL tag/branch from CVS, or download it
as a tarball from the Barry file download page.

Barry uses the asynchronous library calls, which is why the development
branch is used.  The libusb devel branch is well along in its development
cycle, so don't be afraid to play with it.

This version of Barry has been tested using the 2005/11/26 libusb CVS tree.

To build Barry:

	- Edit Makefile.conf to point to the proper location for libusb
		headers and library files
	- Enter the src/ directory and type 'make'
	- If you want to generate doxygen documentation, run 'doxygen'
		as well.  The resulting files will be in doc/doxygen/html/
		This has been tested with Doxygen 1.4.5

This will give you a command line tool called 'btool'.  Use the -h
switch for help on its command line options.  Some good ones to start with
are -l to list the devices found, and -t to list the Database Database.


BlackBerry protocol:
--------------------
No BlackBerry-related protocol project would be complete without referencing
the fine documentation from the Cassis project, which tackled the earlier
serial protocol.  You can find this documentation at:

	http://off.net/cassis/protocol-description.html

There were some major and minor differences found between the serial
protocol and the USB protocol.  Some of the new handheld devices use new
database record access commands, and in these cases the record format changes.
See the code for more detailed information.

Further documentation on the USB protocol is planned.  Stay tuned.


Playing with the protocol:
--------------------------
The USB captures were performed on a Windows XP Pro system running UsbSnoop
from http://benoit.papillault.free.fr/usbsnoop/index.php

You can use the convo.awk and translate.cc tools to turn these very verbose
logs into something more manageable.  Other than the normal USB control
commands at the beginning of each conversation, it was found that only
USB Bulk Transfers were used.

The btool utility is at the stage where it can be used instead of UsbSnoop,
for database operations.  You can use the -v switch to turn on data packet
dumping, which will display the sent and received packets in canonical hex
format as btool talks to the device.  You can use this in combination with
the -d switch to capture new database records to reverse engineer.

If you reverse engineer some of the unimplemented packet formats, please
send patches and/or documentation to the mailing list!

See the Hacking file for more information on getting started reverse
engineering the protocol.


Some notes on code architecture:
--------------------------------

Lowest level:
	Lowest level is the libusb software, currently using the DEVEL branch

USB layer:
	usbwrap.{h,cc}		- C++ wrapper for libusb
	data.{h,cc}		- C++ data class for buffer management
				  and hex log file input and output
	connect.cc		- low level USB test program, capable of
				  using data file scripts to talk to a
				  device via bulk read/write
	debug.h			- general debugging output support


Barry low level layer:
	protostructs.h		- low level, packed structs representing the
				  USB protocol
	time.{h,cc}		- time conversions between 1900-based minutes
				  and C's 1970-based time_t


Barry API layer:
	base64.{h,cc}		- base64 encoding and decoding (for LDIF)
	builder.h		- C++ virtual wrappers to connect record and
				  controller in a generic way
	error.{h,cc}		- common exception classes for Barry layer
	probe.{h,cc}		- USB probe class to find Blackberry devices
	protocol.{h,cc}		- structs and defines for packets seen on wire
	common.{h,cc}		- general API and utilities
	socket.{h,cc}		- socket class encapsulating the Blackberry
				  logical socket
	record.{h,cc}		- programmer-friendly record classes
	parser.{h,cc}		- C++ virtual wrappers to connect record
				  and controller in a generic way
	controller.{h,cc}	- high level API class
	s11n-boost.h		- serialization functions for record.h classes

	barry.h			- application header (only one needed)


Misc utilities:
	btool.cc		- command line testing utility
	convo.awk		- script to convert UsbSnoop log files into
				  trimmed-down request/response conversations
	translate.cc		- translate UsbSnoop log file data into
				  hex+ascii dumps

Enjoy!

December 2005

