Release: version 0.0.4 - 2006/12/??
------------------------------------------------------------------------------
2006/12/07
	- added autoconf support based on Peter McAlpine's patch
	- renamed Makefiles to Makefile.orig and added script to turn
		on old build system if wanted
	- fixed boost-specific error path in btool
	- moved platform specific code out of time.h and into time.cc
	- moved btool.cc, translate.cc, and upldif.cc out of src/ and
		into their own tools/ subdirectory
	- added NEWS file to make autotools happy
	- added a "clean" option to the buildgen.sh script... maintainer's
		use only
	- reworked autoconf and automake files, to support
		barry as a library, to move the programs into their
		own tools directory, and support a proper installation
	- fixed headers in parser.h, btool.cc, and upldif.cc to work
		properly when installed standalone
	- added tools/Makefile.plain for testing compiling against
		installed barry library
	- added commentary on version number system
	- removed Makefile.conf and Makefile.orig, as new autoconf
		system supercedes it
	- added support for boost serialization library in autoconf build
	- added library version number to autoconf build
	- changed boost flag to __BARRY_BOOST_MODE__ to avoid collisions
	- removed debug.h dependency from btool.cc
	- removed libusb check in favour of specific --with-libusb
		option... may need to revisit this later
2006/12/01
	- fixed some missed endian conversions in record.cc and added
		some size checks
	- fixed endian issues in time.h
	- added 2 more functions to the time zone API, and adjusted
		the time zone table for better defaults in North America
	- added btool and upldif to the make install sequence
	- added support for Calendar recurrance data
	- small doc/TimeZones.txt update
2006/11/24
	- added BlackBerry time zone code list, reverse engineered from a 7750
	- added GetTimeZone() to convert device time zone codes to useful data

Release: version 0.0.3 - 2006/11/24
------------------------------------------------------------------------------
2006/11/23
	- added return code check to Controller::SaveDatabase()
	- fixed Data() class constructor, so it doesn't auto-convert
		from any int
	- fixed size checking bug in Packet::ReturnCode() that caused
		uploading to device to fail
2006/11/10
	- added Exceptions doc file, documenting the C++ exceptions used,
		and their hierarchy
	- fixed small bug in 'make install' which didn't build first
	- minor documentation and cleanup in upldif.cc
	- added utility functions to the RecordStateTable class,
		GetIndex() and MakeNewRecordId()
	- changed btool so that the -d command modifiers can be
		specified multiple times to work with multiple records
		at once
	- added Calendar sync code to the opensync module (not complete)
	- cleaned up exception handling in the opensync module, making
		more use of the base exception to make sure no
		exceptions leak into the C library code

Release: version 0.0.2 - 2006/10/12
------------------------------------------------------------------------------
2006/10/12
	- fixed casting error in opensync module
	- minor updates to documentation to prepare for release
2006/09/29
	- added stdint.h to parser.h for uint32_t.  Thanks Ron Gage for
		the bug report
2006/09/08
	- large refactoring of the packet parsing and building code,
		splitting the code into 3 groups:
		- record: handles record specific parsing and building...
			this is mostly subfields with CommonField structs
			as their headers, but sometimes has a specific
			header of its own, in the case of email
			Note: email's header is as yet undecoded.
			Record does not know the details of the packet
			formats, only the formats of its own record data.
		- packet: handles building of complete command packets
			and handles parsing of commonly used header values,
			providing an API for it... packet does not know
			the record format details, but does know the
			details of each Database Operation (protocol.h)
			packet format.
			So far, it seems that there is a real separation
			of operation formats and record formats, with the
			record formats being the same even with different
			database operation codes (GET_RECORDS /
			OLD_GET_RECORDS), which was not confirmed before.
			See the header size of the email record after
			refactoring.
		- controller: handles device state, and the management of
			sockets, commands, and checking for response values.
			The Controller object does not know the format
			of either the record or the packet it is sending,
			but does know the protocol handshake logic used
			to talk to the device.
	- implemented SetRecord (SET_RECORD_BY_INDEX)... syncing, here
		we come!
	- spelling correction in opensync-plugin/AUTHORS
2006/09/01
	- added sample hotplug scripts
	- added .cvsignore files for doxygen and opensync directories
	- added src/endian.h... still need to add configure support to
		handle non-little-endian machines
	- added exception handler in opensync plugin commit_change()
	- removed the device reset code in probe.cc, as resetting a device
		can renumber the devices in /proc on kernel 2.4.x,
		and cause a failure to reach the device...
		FIXME - this should be changed someday to reset if probing
		fails, and restart the probe on reset, as sometimes
		the blackberry devices respond differently when not reset
		Ideally, the probe protocol should be properly reverse
		engineered.
	- added support for retrieving record state table, which is needed
		for smarter syncing
	- added support for retrieving, deleting, and clearing the dirty
		flags of individual blackberry device records
	- added endian macros throughout the code
2006/07/13
	- added opensync-plugin to root Makefile's clean
	- updated time conversion calls to match opensync's latest SVN
	- added opensync_change_set_changetype() (only add for now,
		for development)
	- removed slow sync functions for now
2006/07/07
	- added quick "install" makefile target, to src/install by default
	- added static library target... this is temporary until autoconf
		stuff is added properly... needed for the opensync plugin
	- documented in comments that Barry::BError is intended to be
		the base classes for all exceptions
	- added first round of implementation of an opensync plugin, based
		on the example plugin code from the opensync sources
2006/06/22
	- added to Contact record class:
		- Clear()
		- ReadLdif() to load and parse LDAP data
	- added fragmented send support to Socket class
	- added Probe::FindActive() to make client programs more streamlined
	- fixed hex/decimal printing of record counts in btool
	- added upldif.cc, a utility to take ldapsearch output on stdin
		and upload it to a blackberry
	- updated src/.cvsignore
2006/06/16
	- added parsing of service book fields:
		- old and new name
		- old and new unique ID (UID)
		- content ID (CID)
		- old and new description
		- DSID
		- bes domain / domain
	- date change in legal.txt
	- added initial parsing of ServiceBook field 0x09, and calling it
		ServiceBookConfig for now, for lack of a better name
	- added parsing for ServiceBook field 0x02 on 72xx Blackberries...
		seems to be a name or description, but doesn't appear
		in the device's own GUI... called "Hidden Name" for now
2006/06/09
	- added ServiceBook record class and parser code, based on some
		of Ron Gage's reverse engineering... code is by Chris Frey
	- added AUTHORS file
	- fixed the libusb set_configuration/claim_interface order
		bug in controller.{h,cc}... already fixed in probe,
		but not controller.  Thanks Ron Gage for finding this.
2006/05/25
	- renamed Changelog to ChangeLog in preparation for autoconf
	- renamed Todo to TODO in preparation for autoconf
2006/05/18
	- make clean cleans up tests properly now
2006/03/31
	- turned source code browsing on in Doxyfile
	- added LoadDatabaseByName() and LoadDatabaseByType() template members
		to the Controller class
		- new file: controllertmpl.h
	- documentation fixes in builder.h
	- added static GetDBName() functions to all record classes, in
		support of the template Controller functions
	- fleshed out DatabaseDatabase::GetDBNumber() and GetDBName(),
		returning errors properly
	- documented sample btool.cc code better, and added example
		of Controller template member usage
2006/03/29
	- copyright dates updated for 2006
2006/01/05
	- backed out update to latest libusb DEVEL tree, since it is buggy.
		Stick with libusb 2005/11/26
2005/12/30
	- added clean target to convenience Makefile
	- added Boost to list of dependencies in README
	- fixed minor compile warnings in base64.cc
	- fixed new USB discovery code, and changed endpoint usage to use
		it, instead of the READ_ENDPOINT and WRITE_ENDPOINT
		constants... constants are now removed
		common.h, controller.cc, probe.cc, probe.h, usbwrap.cc
	- added ClearHalt() to Usb::Device (usbwrap.cc)
	- updated usbwrap.h to match latest libusb CVS devel tree
	- updated README to refer to 2005/12/30 libusb CVS devel tree
	- added roadmap to Todo list
2005/12/29
	- added convenience Makefile in root directory
	- added Hacking document
	- minor touchups to README
	- added caution warning to README, since this release will support
		delete / overwrite / upload functionality
	- minor compile order change in Makefile (speed reasons)
	- added dynamic endpoint discovery to probe.cc
	- changed claim_interface/set_configuration() function call order in
		probe.cc based on feedback on the libusb mailing list
	- added USB discovery code to usbwrap.{h,cc}
2005/12/23
	- fixed packing bug in new upload header struct
	- renamed CommonField union from data to u to be consistent
	- added return_code field to DBAccess struct, for error checking
	- added response checking during upload: if response is non-zero
		throw exception in controller.cc
	- added sorting operators to record parser classes... when writing
		contact data to the device, it may be important to write
		group link items last, since they reference other contacts...
		This needs to be tested, and if not required, removed.
	- added GROUP_FLAG field code to Contact parser class
	- fixed offset bug in Contact and Calendar Build() functions
	- fixed name bug in Contact::Build(), now output only with data
	- added appointment type flag support to Calendar record parser
		class, and "all day event" flag support
2005/12/22
	- added autoconf to Todo list
	- refactored the protocol structures so that record structs can
		be reused for upload and download
	- with new protostructs, more header control is handled by
		controller.cc instead of record.cc parsers and builders
	- parser code now accepts an offset, to govern start of record data
	- changed Data sizes from int to size_t and removed casts
	- removed unneeded Parser::GetHeaderSize() (new protostructs make
		this obsolete)
	- added Calendar::Build() for calendar uploads
2005/12/10
	- added s11n-boost.h serialization templates for boost::serialization
	- added boost::serialization to build
	- minor change in usbwrap.cc to display error codes in decimal
	- added SizePacket special case code to Socket::Send()... this is
		required when uploaded packet size is a multiple of 0x40,
		a special 3 byte size packet is sent
	- moved some record class variables to public: so they can be
		properly serialized
	- fixed variable name but in RecordBuilder template
	- added -f switch to btool, for saving and loading of record data
	- added -s switch to btool, for uploading saved data back to handheld
	- added Controller::SaveDatabase()
2005/12/08
	- fixed potential casting / pointer bug in controller.cc
	- added builder.h, to support uploading
	- minor comment fixes in parser.h
	- added preliminary Contact protocol record building support
	- fixed field order bug in ContactRecord protocol struct
	- Contact record.h class now saves unknown Group Link field,
		for later saving
2005/12/07
	- added -fno-strict-aliasing to compiler flags so gcc-4.0.x won't
		optimize away protocol struct casts
		see: 
		http://gcc.gnu.org/bugzilla/show_bug.cgi?id=25235
		http://mail-index.netbsd.org/tech-kern/2003/08/11/0001.html
		http://groups.google.ca/group/comp.lang.c++.moderated/ \
			browse_thread/thread/e7bf096832526f8e/5714701b \
			02a2a3cc?hl=en#5714701b02a2a3cc
	- changed headers so that any low level protocol-specific sizes and
		structs are completely hidden in the library...
		this adds library-only header: protostructs.h

Release: version 0.0.1 - 2005/11/25
------------------------------------------------------------------------------
2005/11/25
	- added barry.h for documentation purposes and application usage
	- updated README for release
	- renamed SBError exception class to BError
	- updated Doxyfile to version 1.4.5
	- added more doxygen comments
2005/11/24
	- added conversion routines (and tests) between time_t and min1900_t
	- added -v option to btool to dynamically control protocol dumping
	- removed duplicated database database table display in controller.cc
	- minor spelling corrections
	- added copyright to usbwrap.{h,cc} as per earlier meeting
	- added support for Old protocol Calendar entries
2005/11/20
	- added legal.txt, to save typing when adding new source files
	- ignore test-base64 file (cvsignore)
	- added contact-to-ldif generation, and updated supporting code
	- added argument to btool to support contact-to-ldif operation
	- added Contact::GetPostalAddress()
	- added README documentation in preparation for future release
2005/11/19
	- added parser.{h,cc} virtual wrapper to generalize LoadDatabase()
	- added code to socket.cc's Packet() command to re-receive on
		reception of empty packets... this seems to be a signal
		from the device that it needs more time for long transfers
		Current limit: 10 blank packets before exception is thrown
		Observed maximum blank count: 1
	- added MessageRecord and OldMessageRecord to protocol.h
	- changed common record field structs to one CommonField struct
	- increased default USB timeout to 10 seconds (some loaded devices
		seem to need more time...)
	- reorganized record.{h,cc} to try to reduce the code duplication
	- record.h classes now "know" the sizes of their corresponding
		protocol structs... this may cause trouble down the line
		with Python, if used(?)
	- added Message class for Email records
	- removed the "Get*" database functions and replaced with
		general LoadDatabase() call, which loads any database
		available, and parses it with a Parser object
	- added GetDBID() for searching for database numbers via name
	- added test code to retrieve and display all email
	- cleaned up comments
	- renamed blackberry.{h,cc} to controller.{h,cc}
	- renamed bbtool.cc to btool.cc
	- added Makefile.conf
	- added copyright notices to source files
	- added COPYING file with GPL
	- put parser in Barry namespace, and added auto_ptr-like mode for
		store object pointers
	- added doxygen docs
	- added header comments to convo.awk script
	- removed Test() function in Controller object, and made class
		better suited to its general API purpose
	- changed OpenMode() so it loads command table and DBDB... it is now
		a public API function
	- moved Controller test code to btool.cc and made tool more
		generically useful... can now download any DB by name on
		the command line
	- added mode checks to Controller
	- added -t and -d command line options to btool
	- added base64 routines from John Walker / Fourmilab and Citadel/UX
	- converted base64 routines into an API, instead of hardcoded
		file based
2005/11/18
	- changed project name to Barry, including namespaces
	- renamed sbcommon.* to common.*
	- increased USB default timeout to 2 seconds
	- fixed formatting bug in Data operator<< output
	- cleaned up the protocol packet structs, getting rid of the
		confusing param/simple split... param is now the tableCmd
		from the Command Table
	- moved protocol structs from record.h to protocol.h
	- added support for older version of the USB protocol, which matches
		the Cassis spec more closely
	- fixed the hardcoded offsets in blackberry.cc's protocol parsing
	- fixed Socket::Close() so on error, socket flags are reset.
		This stops Close() from being called twice on exception
		destructors
2005/11/17
	- added Doxyfile to the project
	- tuned Makefile
	- added mode selection support to Blackberry class (RIM Desktop,
		RIM Bypass, and RIM_JavaLoader)
		Mode selection governs which socket is used in subsequent
		data transfers.
	- added Command Table parsing and protocol support
		Blackberry class, and CommandTable record class
	- added Database database parsing and protocol support
		Blackberry class and DatabaseDatabase record class
	- added Address book retrieval support - dumps data to stdout for now
	- fixed bug in CopyOnWrite mode in Data class, where could allocate
		less buffer than data copied
	- added "easy exception" debug output macro
	- fixed minor spelling error in protocol.cc
	- fixed ModeSelectCommand protocol structure - it is not a parameter
		command, but uses the unknown slots for socket and flag
		data
	- removed hardcoded socket numbers from protocol.h
	- fixed bug in socket.cc:Open() where packet size was not properly
		saved
	- implemented socket::Close()
	- fixed sequence number checks, so it is reset properly on socket 0
	- added Socket::NextRecord() for multiple record data transfers
	- fixed input handling bug in translate.cc
2005/11/11
	- added .cvsignore files to project
	- added README notes to document the source architecture
	- added dbsetup data script, which shows how to get into database
		mode, using the RIM Desktop mode, and open a socket
	- added blackberry.{h,cc} class
	- added command line parameters to bbtool.cc
		-l = list only
		-p = specify pin of blackberry device
	- added blackberry test code in bbtool.cc - debugging the initial
		opening protocol: sockets, modes, etc... see dbsetup for
		results
	- added copy-on-write functionality to Data class, so it can be used
		with plain data buffers with little performance impact
	- added eout() and ddout() debugging - to separate:
		- regular debug output
		- exception debug output (should probably be logged to
			syslog someday, and never turned off)
		- raw data dump output
	- changed errno SBError exception handler to try to decode the error
		numbers into english (limited success)
	- fixed probe and socket USB Bulk message handling, so they don't
		use PollCompletions(), but use IO::Wait() (libusb_io_wait())
	- added common packet size checker in protocol.cc
	- fixed unpacked protocol packet structs... using gcc's
		__attribute__ ((packed)) ... see protocol.h
	- added ModeSelectCommand structure (protocol.h)
	- finished Socket::Open() call  (Close() not yet implemented)
	- moved Socket::Send/Receive() out of private, as they can be used
		for socket 0 operations.
	- cleaned up pointer management with macros:
		MAKE_PACKET()
		COMMAND()
		IS_COMMAND()
	- added IO::Wait() and IO::Cancel() to correspond with libusb API
	- added datadumping in usbwrap for easy protocol capture
	- added preliminary record.{h,cc} classes
	- added Contact record parsing, and test code
2005/10/20
	- syncberry tree started

