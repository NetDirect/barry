Release: version 0.13 - 2008/05/??
------------------------------------------------------------------------------
2008/05/29
	- fixed compile errors in gui when compiling with gcc 4.3.x
	- added ppp options and chatscript files to RPM build
	- updated docs with binary package default PPP scripts
	- added -P option to pppob to specify password
2008/05/27
	- fixed missing #includes in src/data.cc
	- fixed compile errors in library, utils, and plugin when compiling
		with new gcc 4.3.x... gui not yet finished
2008/05/24
	- added minimum g++ version to website dependency docs
2008/05/23
	- added ppp/README
	- reorganized sample ppp options files so they are easier to compare,
		enabled "usepeerdns" in both, and disabled the speed
		setting in barry-verizon
	- updates to website documentation
		- added FC9 to distro list
		- added page for BarryBackup
		- added page for USB modem / pppob
2008/05/22
	- added sample ppp options files for Verizon Blackberries
		Sample files from Michael L. Stokes
	- updated AUTHORS
	- renamed sample ppp peer files, in preparation for installing
		them automatically in binary packages
	- modified verizon options file to use pppob
	- split the sample rogers options file into options and chat files
2008/05/16
	- put sequence packet check directly in the SocketZero::RawReceive()
		function, which now localizes all sequence packet
		handling and checking, as well as avoids packet
		order problems when multiple sockets are in use,
		such as with pppob...
		FIXME - this localized sequence checking may make all
		the calls to CheckSequence() obsolete which
		should probably be cleaned up someday, if so.
	- reorganized src/socket.cc to match class private/public
		order (no code change, only move)
	- added verbose log message to Controller constructors, so it is
		possible to determine whether a program is using
		threaded or non-threaded sockets
	- added -z and -Z command line options to btool to control
		the non-threaded/threaded behaviour, respectively;
		and updated the man page
	- removed debug sleep() calls from pppob
	- added SIGINT signal handler so pppob shutsdown gracefully when
		pppd is killed
2008/05/15
	- mention CVS and git on main documentation "how to" list
	- moved PPP filter logic into its own class
	- enhanced PPP filter class to support prepending of
		empty bytes if needed, in order to reduce data
		copying, and clarified why there is no GetBuffer()
	- added ProbeResult::HasIpModem() to determine whether
		IpModem endpoints are available
	- added pure virtual Modem base class for common
		modem-oriented API (only Open and Write so far)
	- Mode::IpModem is now derived from Barry::Modem
	- experimental implementation for Mode::Serial,
		which is now derived from Barry::Modem,
		and uses PppFilter
	- pppob now supports IpModem and Serial modes, and logging
		to file instead of stderr
	- added man page for pppob
2008/05/10
	- modified the planned version numbering scheme in doc/VersionNotes,
		so that a 1.0 is possible, with 1.50 as the devel series
2008/05/09
	- continuing to update html documentation in preparation for
		0.13 release
2008/05/02
	- removed -fvisibility-inlines-hidden compile options since some
		distros have old or broken compilers or libraries where
		the build breaks looking for STL templates (Ubuntu 7.10,
		I'm looking at you...)
	- changed brecsum so usage information is displayed automatically
		if no command line arguments are specified
	- added opensync-plugin to maintainer test scripts, and added
		ubuntu710 to the test build sequence
2008/05/01
	- updated doc/TroubleShooting.txt
	- removed usb_control message check from IpModem endpoint probing
		in src/probe.cc, since some devices, like the 8700
		have both RIM_UsbSerData mode and IpModem mode.
	- fixed serialization code for Calendar record class, in s11n-boost.h
	- made UnknownField's data member into its own type,
		so that when building records, it doesn't get processed
		like a null terminated string... also added more
		BuildField() helper functions for accuracy
	- fixed missing fields in the Calendar record build process
	- added Calendar to list of Builders in tools/btool...
		it is now possible to run: btool -s "Calendar" -f datafile
	- added tools/brecsum program, which calculates SHA1 checksums
		on database records, for testing
	- added brecsum to debian and rpm builds
	- added recurrence builder function to Calendar record builder code
		which completes builder support
		Checksums from the following commands now match:
			brecsum -d Calendar > sum1.txt
			btool -d Calendar -f calendar.dat
			btool -s Calendar -f calendar.dat
			brecsum -d Calendar > sum2.txt
			diff -u <(sort sum1.txt) <(sort sum2.txt)
2008/04/29
	- applied Jason Thomas's ACLOCAL_FLAGS patch to make autoreconf
		work again... Thanks!
	- applied Jason Thomas's debian build dependency patch
	- updated AUTHORS
2008/04/26
	- started documentation overhaul in doc/www, putting the commonly
		asked questions right on the front page, and making it more
		goal-oriented, so it is hopefully easier to use
2008/04/25
	- updated NEWS file
	- fixed error messages in m_desktop.cc that still referred
		to Controller
2008/04/25
	- major merge of barry-b1-socket-arch-branch into MAIN.
	  The following is the changelog from that branch, which is now MAIN.

	2008/04/25
		- added thread-safe logging mechanism
		- added preliminary IP modem support... requires a recent
			device... serial mode is not yet supported
		- merged HEAD changes
	2008/03/27
		- changed Barry::Init() so programmer can choose where
			debug and exception information goes, instead of
			always to stdout
	2008/03/22
		- merged HEAD changes
	2008/03/20
		- fixed bug in probe class, which missed storing the PIN
			number in ProbeResult
		- also added ProbeResult constructor
		- merged changes from visibility branch:
			- GCC visibility support, limiting what symbols are
			  visible in the shared library, libbarry... this makes
			  a drastic reduction in the symbol table, and should
			  avoid future name clashes with other libraries such
			  as opensync
			  See: http://gcc.gnu.org/wiki/Visibility
			- vformat_() function name changes
	2008/03/07
		- merged HEAD changes
		- added threads library to new bs11nread build
	2008/02/28
		- fixed variable size issues in btranslate.cc, evident with
			some compilers on 64 bit systems
		- merged HEAD changes
		- added comments for threaded usage in usbwrap.h
		- changed router to use SocketId typedef, for clarity
	2008/02/22
		- fixed const char warnings from newer gcc compilers
		- controller object now saves a copy of the probe result
			and provides an API to retrieve it
		- added sanity checks to m_serial.cc
		- fixed probe behaviour so that a USB probe on an endpoint
			that doesn't respond won't halt everything
		- refactored some of the probe code, and added checks for
			IP modem endpoints
		- added Probe::DumpAll()
		- added Open() call to pppob.cc (not yet complete)
	2008/01/30
		- implemented dataqueue.{h,cc}... looks ready for testing,
			once things compile again
		- changed free list copy in router.cc to use
			DataQueue::append_from()
		- finished packet.{h,cc} implementation, ready for testing
		- finished controller.{h,cc}, ready for testing
		- finished m_desktop.{h,cc}, ready for testing
		- added skeleton m_serial.cc
		- the base library and utilities compile again!
		- added constructor for SocketZero(queue)
		- fixed ErrnoError::GetMsg()
		- updated GUI and opensync plugin to compile with new API
		- moved Raw Send/Receive socket functions to private
		- fixed packet header size bug in socket that caused
			socket ID override to be skipped
		- fixed incorrect use of gettimeofday()
		- fixed race condition where Controller could destroy
			the Usb::Device object before the SocketRoutingQueue
			was done with it
		- fixed segfault in SocketZero::RawSend() when a router
			was in use
		- fixed Open() bugs in btool... Open() must be outside of loops
		- btool uses the router thread now, for testing
		- partially implemented m_serial.{h,cc}... needs testing
		- added automatic buffer allocation to SocketRoutingQueue
			constructor
		- made AllocateBuffers() a little smarter, so it was not
			pure appending
		- added a context data pointer to the SocketRoutingQueue
			RegisterInterest callback
		- added RegisterInterest functionality to Socket class
		- added exceptions on router read errors in socketzero
	2008/01/26
		- implemented router.{h,cc}... looks ready for testing,
			once things compile again
	2008/01/25
		- merged HEAD changes
		- added router.cc and continued work on new arch
		- merged HEAD changes for 2008 copyright statements
		- added scoped_lock.h
		- added ErrnoError exception class
		- documented Controller / SocketRoutingQueue behaviour
		- more router implementation
		- simplified pppob
		- audit and cleanup of socket.{h,cc} code... looks ready
			for testing now, once things compile again
		- removed FIXME in router.*
		- removed pthread header from pppob as it is not needed
	2007/11/22
		- merged HEAD changes
	2007/10/25
		- merged HEAD changes
	2007/10/19
		- branch started, to track development of the new socket
			architecture, and new mode architecture, needed
			to support GPRS modem support, and threaded
			USB access
		- committed work-in-progress... does not compile

2008/04/10
	- added Tasks and Memos to TODO list
2008/03/27
	- added support for Blackberry 8120, which has a unique Product ID
		Sourceforge tracker ID: 1829537
2008/03/22
	- removed TimeZones from TODO list, as it is done
2008/03/21
	- version bump:
		- configure.ac
		- src/Makefile.am
		- src/version.cc
		- gui/src/BackupWindow.cc
		- src/Doxyfile
		- rpm/barry.spec
		- debian/changelog
		- opensync-plugin/src/barry_sync.cc
	- added GCC visibility support, limiting what symbols are visible
		in the shared library, libbarry... this makes a drastic
		reduction in the symbol table, and should avoid future
		name clashes with other libraries such as opensync
		See: http://gcc.gnu.org/wiki/Visibility

Release: version 0.12 - 2008/03/21
------------------------------------------------------------------------------
2008/03/21
	- changed maintainer script to use CVS export instead of checkout,
		to avoid the CVS directories
	- added support for building Debian source packages with proper
		diff.gz and dsc files
	- fixed find warning in maintainer/make-rpm.sh
	- added support for Ubuntu binary packages to the maintainer build
		scripts
2008/03/13
	- renamed all vformat_ and VFormat symbols in opensync plugin's
		copy of vformat code, so they don't conflict with the
		real opensync libraries
2008/03/07
	- updated the install.php web page with Paul Dugas's notes on
		building RPM's from CVS
	- fixed problem in tools/Makefile.am where bs11nread was included
		in build, even if --with-boost was not specified
		on ./configure command line
2008/03/06
	- changed format of Boost serialization file output from btool,
		so that the database name is stored as the first line
		of the file
	- added tools/bs11nread.cc to read Boost serialization file data
		written by btool
	- minor adjustments to r_message.h and r_timezone.h
	- updated s11n-boost.h header to match record classes
2008/03/01
	- applied Time Zone parsing patches from Brian Edginton
	- added Time Zones to list of supported parsers in btool.cc
2008/02/29
	- changed configure.ac to use bzip2 for "make dist".. thanks to
		Paul Dugas for the tip
2008/02/28
	- committed Chris Burgess's update to the roadmap document
	- applied Paul Dugas's x86-64 build patch, except the
		tar.bz2/tar.gz change
	- updated AUTHORS file
2008/02/22
	- fixed configure.ac's --with-boost option, so that without args,
		it defaults to using --includedir and --libdir settings,
		instead of hardcoding /usr/include and /usr/lib... this
		should allow smarter compiling on 64 bit systems
	- updated RPM spec file to use new --with-boost behaviour
	- ahem, fixed configure.ac again... don't use --includedir and
		--libdir, as those are install targets... oops.
		Don't add path overrides at all if not specified.
2008/01/25
	- fixed locale issues in src/data.cc
	- updated copyright statments for 2008
2007/12/21
	- applied wording correction patch to btool from Matt LaPlante
2007/12/07
	- changed hard coded databases names in btool to calls to
		<recordclass>::GetDBName()
	- version bump:
		- configure.ac
		- src/Makefile.am
		- src/version.cc
		- gui/src/BackupWindow.cc
		- src/Doxygen
		- rpm/barry.spec
		- debian/changelog
		- opensync-plugin/src/barry_sync.cc
	- updated TODO

Release: version 0.11 - 2007/12/01
------------------------------------------------------------------------------
2007/12/01
	- fixed null pointer bug in Probe class (bug #1842407)
	- added pause to maintainer release script
2007/11/30
	- version bump:
		- configure.ac
		- src/Makefile.am
		- src/version.cc
		- gui/src/BackupWindow.cc
		- src/Doxygen
		- rpm/barry.spec
		- debian/changelog
		- opensync-plugin/src/barry_sync.cc

Release: version 0.10 - 2007/11/30
------------------------------------------------------------------------------
2007/11/30
	- added support to the usbwrap Match class to limit its
		search by busname / devname
	- added support to the Probe class to limit its search for
		Blackberry devices to a given bus or device name
	- added command line options to btool for the above Probe
		bus/device names, and updated the man page
	- updated the www docs with regard to the new usb_storage
		behaviour and the new blacklist files... less
		concern about berry_charge and usb_storage conflicts
	- added bidentify tool and accompanying man page
	- fixed bug in rpm maintenance script that used the wrong
		spec file for opensuse
2007/11/29
	- added better error checking to breset
	- commented the sleep() for the 8830
	- added code to handle the race condition where usb_storage
		claims the device before bcharge arrives on the scene,
		by asking the kernel to detach the driver from
		the Mass Storage interface... this change makes it
		possible to run bcharge, moving from 0006 to 0004
		to 0001 and back to 0004, all *while* usb_storage
		is loaded!
	- changed Probe class behaviour so that it will not throw an
		exception on Device Busy (-EBUSY) but instead
		log the error in an internal array and keep going.
		This makes it possible to use btool and barrybackup
		with two devices plugged in at the same time.
		BACKWARD COMPATIBILITY NOTE: this changes initializaion
			behaviour, but in practice, it should only
			make applications look more capable, not less.
	- updated btool to show errors logged by Probe
	- added message to specify which PIN device is being used by btool
	- added explanatory comments to udev rules files, about why
		they are so verbose
2007/11/27
	- added ClearHalt() calls to probe and controller classes, just
		before any communication happens... the 8830 seems
		to need this
2007/11/23
	- added usbwrap.cc:GetConfiguration()
	- added code to check whether the configuration is the one
		we require, before calling SetConfiguration()... and not
		to call it if unnecessary.  This allows us to run
		at the same time as usb_storage.
		Thanks to Martin Owens for not letting this issue go. :-)
	- added sleep to bcharge, before calling usb_reset()... the
		Blackberry 8830 behaves like a Pearl device in that
		it has mass storage support, but behaves like a Classic
		in that it resets itself... the usb_reset() seems
		to reset it back to 0006.  The sleep allows the device
		to disappear via its own reset, and let usb_reset()
		fail naturally on these devices.
		This is not an ideal solution... mainly for testing.
2007/11/09
	- added modprobe/blacklist-berry_charge as per Simon Ruggier's
		suggestion.  Thanks also to Niels de Vos for a similar
		suggestion.
	- fixed udev rules to work on both old and new distros
		Thanks to Duncan Mak for the bug report.
	- AUTHORS update
	- fixed string comparison to use case insensitive compare in
		opensync plugin
	- updated Debian package to include modprobe blacklist file
	- updated rpm spec file to include modprobe blacklist file
	- split the maintenance scripts into release and test, so
		that release package builds can be done faster
2007/10/26
	- opensync plugin fixes:
		- fixed memory leak in vBase::GetAttr()
		- added support in vformat parser to parse "blocks"
			and keep track of the hierarchy when
			parsing an iCalendar, etc.
		- added support for searching for attributes only
			inside certain blocks (i.e. find first
			DTSTART in VEVENT block, not VTIMEZONE block)
2007/10/25
	- fixed bug in Calendar::Clear, missing the Free / Class
		member variables, leaving them uninitialized
	- added examples/addcalendar.cc
	- added more logging to the opensync plugin, logging the
		ToBarry conversion results
	- added code to force struct tm.tm_isdst to -1 before calling
		mktime, in vformat.c
		- fixed typo in previous fix
2007/10/12
	- renamed ktrans and translate to bktrans and btranslate to avoid
		file name clashes with libtranslate of Gnome
		Closes bug #1812410 reported by Troy Engel.
	- version bump:
		- configure.ac
		- src/Makefile.am
		- src/version.cc
		- gui/src/BackupWindow.cc
		- src/Doxygen
		- rpm/barry.spec
		- debian/changelog
		- opensync-plugin/src/barry_sync.cc
	- fixed missing default config file in the debian package for
		the opensync plugin
		Closes bug #1812224 reported by Ariel (adonatti).
	- added debian dbg packages for tracing segfaults
	- modified maintainer scripts so debug packages would reference
		source code located in /usr/src/barry-0.9, etc.

Release: version 0.9 - 2007/10/12
------------------------------------------------------------------------------
2007/09/29
	- adjusted autosuspend disabling code in bcharge, based on new
		information on how kernels 2.6.21 / 2.6.22 work.
		See bcharge.cc for comments.  If device/power/level or
		device/power/autosuspend exist, charging should now work
		without recompiling the kernel.
	- updated website docs with autosuspend info
2007/09/27
	- large update to the doc/www web pages, moving some of the
		information in README files to html format, so that it
		is commonly available on the web
	- added step in maintenance scripts to automatically build the
		.html files in doc/www when making a tarball release
2007/09/22
	- added libopensync 0.22 version requirement to barry.spec file,
		but it doesn't seem to work on OpenSuSE 10.2, where it's
		needed.... hmmmm
2007/09/21
	- updated README to mention new tree build configure options
	- fixed the configure scripts and makefiles so that when building
		with custom CXXFLAGS and LDFLAGS environment variables,
		it doesn't break the full-tree build mode, when
		using --enable-gui and/or --enable-opensync-plugin
	- added config.h.in~ to buildgen.sh clean target
	- converted Debian build scripts to use cdbs
	- added opensync plugin binary package for Debian
	- added "Getting Started" section to web pages, as well as an
		explanatory document for various system requirements
	- turned on opensync build in RPM maintainer scripts
2007/09/20
	- added filename to power/state error message in bcharge.cc
	- adjusted maintainer scripts to automatically adjust barry.spec
		for opensuse rpm builds
2007/09/13
	- fixed some of the release build scripts and added support for
		automated opensuse 10.2 builds
		- fixed build target to i386
		- changed scripts to add to PKG_CONFIG_PATH variable instead
			of overwriting it
2007/09/07
	- added website docs to doc/www... these are out of date at the
		moment, and hopefully by including them here, they
		will be updated more frequently
2007/09/05
	- applied Simon Ruggier's build system patch that allowed a build
		of all 3 components from the root directory and fixed the
		configure scripts to support external build directories
	- reordered clean commands in the buildgen.sh scripts, and removed
		the INSTALL files, since they are auto-generated by autoconf
	- removed extraneous buildgen.sh calls in maintainer scripts
	- added Simon Ruggier to AUTHORS
	- added explanatory note to 3 stage test build process in
		maintainer script
2007/08/24
	- fixed Category handling in the Contact record class, to
		parse the comma separated string into an array,
		and back
		Note: this involves a change to the boost serialization
			and will affect backward compatibility with
			old serialization datafiles
	- added Category to examples/addcontact.cc
	- added Category support to the opensync plugin
2007/08/23
	- fixed wrong read/write in btool output (oops)
	- added BadSize exception, and changed CheckSize() function
		to throw it on error
	- changed backup GUI to catch BadSize exceptions on initial
		connect, and try a reset if that error occurs, since
		that likely means the device didn't shutdown properly
	- fixed in opensync plugin:
		- some vcard data contains types codes in capital letters,
			so added lower case conversion routine
		- changed the order of address lines, so that address1
			is the street, address2 is the extended address,
			and address3 is the PO Box.  The Blackberry
			doesn't seem to have any PO Box field.
2007/08/20
	- added -e endpoint override option to btool
	- added status message to endpoint override
2007/08/18
	- added configure check for strnlen, and implementation for
		systems that don't have it, or that have it implemented
		incorrectly.  Went a little paranoid here, since
		AC_FUNC_STRNLEN doesn't set a define in config.h,
		so I had to do it manually, and check in case autoconf
		changes in the future... ugh.  See src/strnlen.h for
		the gory details.
	- added code in probe.cc to fetch the device's description.
		The description is now part of the probe results
		along with the PIN.  Updates to protocol.h, adding
		a new attribute definition.
		Thanks to Rick Scott for pointing out the code in
		XmBlackberry where he implemented this first.
	- fixed header dependency in record-internal.h
	- updated the "required autoconf" version to 2.61 for root build
	- moved nested structs out of the record classes that contain them,
		in order to better support SWIG and Python
2007/08/17
	- changed bcharge to use getopt() for its argument processing
	- added options -p and -s to bcharge, to adjust usb suspend
		settings automatically where possible
	- updated the udev rules to use the new bcharge settings
	- updated the bcharge man page with the new arguments
2007/08/16
	- cleaned up Usb exception handling, moving libusb error code
		processing into the Usb::Error exception class.
		error.cc is now an empty shell
	- added return codes to the Usb::Error exceptions
	- removed aboutdialog.{h,cc} from the backup GUI since even
		Debian stable now has up-to-date gtkmm libraries
	- added more user friendly error message for the "device busy"
		case, recommending 'rmmod usb_storage'.
2007/08/09
	- added better error checking to bcharge.cc
	- version bump:
		- configure.ac
		- src/Makefile.am
		- src/version.cc
		- gui/src/BackupWindow.cc
		- src/Doxygen
		- rpm/barry.spec
		- debian/changelog
		- opensync-plugin/src/barry_sync.cc
	- removed usb_set_configuration() check from bcharge.cc, since
		that may fail under normal operation, in this case

Release: version 0.8 - 2007/08/03
------------------------------------------------------------------------------
2007/08/03
	- moved Interface implementation to usbwrap.cc file
	- added dout debugging messages to usbwrap.cc
	- clarified unhandled packet error message in socket.cc
	- added temporary workaround in opensync-plugin environment's
		Reconnect(), for odd message seen on newer Blackberry
		devices
	- fixing issues with Brian Edginton's MessageRecord patch (2007/06/29)
		- fixed missing size check in message oriented ParseHeader()
		- fixed endian conversion issues (also found one pre-existing
			endian bug in the process)
		- moved message timestamp converter code to time.cc
	- added Barry version number to opensync plugin name
	- changed maintainer scripts and rpm.spec to use bzip2 instead of gzip
	- added opensync-plugin to configure script build
	- added -S option to btool, to list supported parsers and builders
	- slight change to opensync-plugin/buildgen.sh to cleanup config.h.in~
	- opensync-plugin/README update
	- added opensync-plugin/patches for others who may be building and
		testing the plugin with OpenSync 0.22
	- added debian package build scripts to maintainer/
2007/08/01
	- added entry to doc/TroubleShooting.txt
2007/07/28
	- added doc/TroubleShooting.txt
2007/07/27
	- opensync plugin:
		- fixed bug in vcard.cc that was using the FN field
			for the broken-down name instead of N
		- added dbId and dbName to DatabaseSyncState
		- added Reconnect() functionality to BarryEnvironment class
			and moved connect logic out of barry_sync.cc
		- changed the batch commit functionality in barry_sync.cc
			to single-change-commit.  Why?  Because opensync
			0.22 groups all batch changes into one group
			and calls one batch commit function, even if you
			registered two.  Moving to single change commit
			mode removes a chunk of unneccessary code
			from the plugin as well, and can in theory
			ease memory pressure in the library.
		- added FinishSync() to perform actions needed on successful
			syncing completion
		- disconnect on successful sync completion, and reconnect,
			since the device's dirty flags don't seem to
			be updated until a disconnect occurs.
2007/07/26
	- added ReadDataArray() to data.h, using an istream instead of
		requiring a file
	- added raw data version of BuildField() to record-internal.h
		This is so that btool doesn't add extra null terminators
		to unknown data, when restoring with option -s
	- fixed bugs in r_contact.cc:
		- fixed bug that caused a LastName/FirstName swap
			if FirstName was empty and you wrote a contact
			record into the device.... First/Last Name
			fields are position sensitive, and the code
			was missing the empty FirstName case on writing
		- fixed bug in BuildFields() and Dump() where they
			were not updated to handle the new field
			table added for the postal address changes
			on 2007/07/20, oops
	- opensync plugin:
		- changed the plugin config file, so it is possible to
			turn debug output on/off without recompiling
		- moved the standalone Map2Uid() function into
			the DatabaseSyncState class, and changed the
			code to produce "contact-#" and "calendar-#"
			UID strings, instead of just numbers
		- changed default PIN to -1, so that if the user doesn't
			configure properly, it will fail... this is a
			safety measure to avoid syncing with different
			devices and corrupting the cache/idmap...
			this should be fixed someday, to handle this
			automatically
			On second thought... is this right?  Perhaps
			it is better to fail if the PIN is not what
			is expected, so a user doesn't accidentally
			sync the wrong device and lose data.
			Actions to take on new PIN:
				- force slow_sync, or
				- fail
		- incorporated the new VCardConverter code into the
			main barry_sync.cc plugin code
		- fixed bug that did not clear the devices dirty flags
			in the case where a sync only read data from it,
			and didn't write
		- changed PIN error message number to hex
2007/07/20
	- minor wording change in backup GUI prompt: "Backup working..." to
		"Backup in progress..."
	- renamed Contact class's Title field to JobTitle for clarity
	- added record function ParseFieldString(), which properly handles
		strings from the device that have multiple null terminators,
		and changed the record parsing code to use this new function
	- moved FullName() function from ldif.cc to r_contact.cc since it
		is generally useful in areas outside of LDIF processing
	- refactored postal addresses in the Contact record class into
		a new class called PostalAddress
	- renamed Address class in record.h to EmailAddress
	- moved Contact::GetPostalAddress() to record.cc as part of the
		new PostalAddress class and renamed it
		PostalAddress::GetLabel()
	- opensync plugin:
		- refactored vformat helpers into separate base class
			called vBase
		- added vCard converter class
		- commented out the code that skipped over the adding
			of empty attribute values and parameters,
			since VCARD depends on some of this behaviour
		- movified vformat.c:vformat_find_attribute() to take
			an extra nth argument, in order to search
			for multiple attributes with the same name...
			the way this is coded is a bit inefficient...
			but we're moving away from vformat when we move
			to OpenSync 0.3x / 0.40, so this is just temporary
			pain
2007/07/19
	- added SUBSYSTEM=="usb_device" to example udev rules, in order
		to avoid running bcharge for each endpoint that is
		added by udev, when first plugged in.  Running bcharge
		back-to-back multiple times can crash some
		Blackberries.
2007/07/14
	- opensync plugin:
		- fixed ID mapping bug in the case of a non-numeric UID
			from syncing external -> Barry, and then the
			new Barry ID would look like a new change
			when syncing back from Barry -> external.
		- added support for slow sync
		- added clear() to idmap class
		- added vformat attr parameter extraction class
		- added more trace logging during vformat/Barry conversions
		- added Notification time support
		- handled "all day" vformat special case, when DTEND
			does not exist in a vformat data block
	- changed the min1900_t time conversion functions to handle
		the 0xffffffff special case, when notifications
		are turned off on a calendar event (src/time.cc)
	- also made the calendar data dump output clearer for
		disabled timestamps, and added debug output
		for the raw min1900 value, in case there are more
		special cases in the future
2007/07/13
	- fixed null pointer access in opensync's HasMultipleVEvents()
2007/07/12
	- upper management directive: revert all OpenSync 0.3x changes
		and proceed with OpenSync 0.22.  Reverting the
		opensync-plugin/src tree to Barry 0.7 status.
2007/07/06
	- reorganized exception and trace code in opensync plugin
	- added XmlToCalendar() function, based on unfinished opensync
		library API that is not yet finished... will be
		committed to opensync svn tree when complete
	- added OSyncXMLField logger to plugin trace class
2007/06/29
	- applied email MessageRecord patch from Brian Edginton (thanks!)
	- updated Message::Dump() to output more valid mbox data...
		the goal is to be able to do:
			btool -d "Messages" > email.mbox
			mutt -f email.mbox
	- changed some TODO's to FIXME's to keep it grep-consistent
	- applied Folder support patch from Brian Edginton
	- fixed pedantic compile warnings, and changed order in src/Makefile.am
	- removed unneeded cast in src/r_folder.cc
2007/06/28
	- minor adjustment to ctags building in buildgen.sh
	- applied patch from Brian Edginton for better boost detection
		in configure.ac
	- added boost usage message to btool -h output
2007/06/21
	- more porting of OpenSync module to 0.30
	- added ctags build for opensync source tree to buildgen.sh
2007/06/14
	- changed PKG_CONFIG_PATH setting in rpm script, so that systems
		like SuSE that have an extensive PKG_CONFIG_PATH
		in general use will not break on build
	- added PKG_CONFIG_PATH to debian script too, just in case :-)
	- added debian/changelog to doc/ReleaseChecklist.txt
	- added comment to rpm/barry.spec regarding SuSE RPM builds
2007/06/08
	- applied patch from Niels de Vos fixing debian package build
		dependency
	- applied Brian Edginton's Saved Email Messages patch
	- updated r_saved_messages.cc comment to match header
	- added GetRecType()/GetUniqueId() to r_saved_messages.h, since
		SetIds() is already there
	- removed Address version of operator<<() from message related headers
		and moved into record.h
	- added std::hex to message related dumps, and changed output to
		be more mbox-like
	- updated doc/CodingStyle.txt to cover switch() statements
	- opensync compiles again, with 0.30!  (not functional yet)
		- moving closer to more modular and reusable plugin functions
	- updated release checklist for opensync version number
2007/06/07
	- added doc/CodingStyle.txt... preliminary version
2007/06/06
	- applied Brian Edginton's PIN message patch
	- changes to PIN message patch:
		- fixed missing backslash in src/Makefile.am
		- fixed tab alignment throughout
		- removed typedef from Address struct
		- added clear() to Address... might as well, if it it is
			going to be a standalone type
		- fixed missing comma in PINMessageFieldLinks table
		- changed MessageRecordId in PINMessage to load from a new
			uint32_t field in CommonField, instead of piggy
			backing on a field for other use
	- did some testing and found that PINMessage's MessageRecordId
		is the same as the RecordId given through the SetIds()
		API... but these Id's are duplicated in the protocol...
		RecordId is stored in the protocol header, while
		MessageRecordId is stored in the record it self as
		a common field... added RecType and RecordId to
		PIN Message so that we store both of these
	- updated AUTHORS
2007/05/27
	- added item to gui/TODO
	- applied Brian Edginton's s11n-boost.h patch
2007/05/25
	- renamed template values to more consistent naming scheme
	- applied memos and tasks patch from Brian Edginton, slightly
		modified to split into the new separate files system
	- changes to memos and tasks classes:
		- reformatted the code to match coding style
			(come on Brian) :-)
		- added copyright notice
		- changed class to singular (Memo, not Memos)
		- placed in Barry namespace
		- added #ifdef header protectors
		- added new files to Makefile.am
		- added new r_*.h headers to record.h
	- added support for Memos and Tasks to tools/btool.cc, based on
		Brian Edginton's patch
		(currently commented out, for Boost library reasons):
	- added doc/CommitPolicy.txt
	- updated AUTHORS
2007/05/24
	- added ctags generation to buildgen.sh
	- applied record.{h,cc} fix patch from Brian Edginton
		- ClassFlag
		- FreeBusyFlag
		- Clear() fixes
	- fixed broken formatting in above patch
	- refactored record parser classes into separate files for each
	- changed the ConvertHtoB<> template to inline, as it caused
		linker errors with the new file layout
2007/05/17
	- fixed bug in Debian packaging that put util commands in
		/bin and /sbin instead of /usr/bin and /usr/sbin
	- commited byteswap.h replacement code from gm2net
	- backup gui:
		- removed unneeded debug messages on stdout
		- changed the default for debug output to "off"
			and added a command line option to turn
			it on if necessary  (--debug-output)
		- command line option --help now also works
	- fixed bug in Calendar class where it didn't initialize
		RecType properly... and cleaned up other RecType
		code to use the GetDefaultRecType() functions,
		localizing the constants in one place
2007/05/11
	- applied patches from Brian Edginton, parsing more
		fields in Contact and Calendar records
	- added Brian Edginton to AUTHORS
	- reformatted record.{h,cc} to match the rest of the code,
		removed commented out code, and removed mention of
		Outlook from the comments.
	- updated udev/10-blackberry.rules.Debian for Debian Etch
	- updated debian/rules to use new udev rules file
	- removed debian/postinst, as stable versions of Debian now
		have a recent udev, and don't need the special handling
	- updated Debian build scripts to build separate packages:
		libbarry
		libbarry-dev
		barry-util
		barrybackup-gui
	- added menu support to Debian barrybackup-gui package
	- made the buttons bigger in the backup GUI, as they were too
		small on Debian Etch
	- opensync plugin:
		- more progress in porting to opensync 0.30, heavily
			based on the example plugin in the opensync
			svn tree...  this is a work in progress, and so far
			is incomplete
2007/05/04
	- opensync plugin:
		- partial porting to opensync 0.30 (in progress!)
		- fixed bug in sync_done where it reported context error
			and then success afterward
	- checking in new INSTALL files based on Etch's autoconf run
	- added item to gui's todo list
	- bumped version numbers to 0.8 in:
		- configure.ac
		- src/Makefile.am
		- src/version.cc
		- gui/src/BackupWindow.cc (about dialog)
		- src/Doxygen
		- rpm/barry*.spec

Release: version 0.7 - 2007/05/02
------------------------------------------------------------------------------
2007/05/02
	- added rpm building to maintainer/release scripts
	- added "HEAD" feature to tarball creation script, for easier testing
	- updated maintainer/README
	- updated maintainer/release.sh to use new HEAD feature too
2007/05/01
	- added pppob to rpm barry.spec
	- bumped release number in barry.spec
2007/04/30
	- opensync plugin:
		- fixed size check bugs (strlen() == 0 when empty)
		- finished refactoring calendar conversion routines
		- started timezone parsing, but this may go away
			if we use opensync 0.30's time functions and
			xml data format...
		- added development note to README
2007/04/29
	- updated README and opensync-plugin/README with more current
		build instructions
	- opensync plugin:
		- refactored some calendar conversion routines
		- added Barry->vCalendar conversion for recurring appointments
2007/04/27
	- opensync module:
		- removed some unneeded trace logs
		- fixed VEventConverter constructor bug, with uninitialized
			m_Data pointer
		- eased up the requirement that every calendar event
			must have a summary... defaults to "<blank subject>"
			if empty
		- added more VCALENDAR fields to match Barry::Calendar record
		- fixed case sensitive compares in vformat.c
2007/04/26
	- opensync module work:
		- added id map class to map string uid's from OpenSync to
			numeric ID's from the Blackberry
		- fixed bug in CommitChange() where it was still using
			a hard coded calendar record state table
		- added lots of logging throughout
		- fixed bug where newly added records didn't use the
			change object's uid, but created a new ID,
			causing another sync on the next run
			i.e. (CommitData_t was missing an argument)
		- fixed bug where uninitialized notification time was
			written to the Blackberry
	- more opensync module work:
		- refactored the environment class into another subclass
			called DatabaseSyncState, and moved some stand-
			alone functions from barry_sync.cc into
			the environment classes
		- added a tagged constructor to the trace class
		- fixed idmap::Load() to clear map before loading
2007/04/20
	- renamed barry-config to barry-sync, the default configuration
		file for the opensync module... and filled it with
		a sample configuration
	- added code to update the calendar cache, and write it to disk
		on success (opensync module)
	- added code to clear dirty flags in the device (opensync module)
	- allowed comments in the config file
	- added vformat.c from libopensync 0.22, since the vformat
		routines are not available from the plugin side
2007/04/19
	- updated gui/TODO
	- added -d switch to bcharge to switch back from 0001 to 0004 mode,
		changed the auto-detection logic to ignore iProduct and
		only use idProduct, and updated man page
	- updated breset to recognize the Pearl in 00004 mode as well
	- changed src/probe.cc logic to assume that the second endpoint
		pair is the one needed for database communication, instead
		of doing a reverse search from the end... newer Pearls
		in Dual mode seem to have at least 3 or 4 endpoint pairs,
		and the old search didn't always work
	- applied sourceforge patch #1696884 from Peter Silva, updating
		the Debian build for Etch, and including all files in one deb
	- added Peter Silva to AUTHORS file
	- uncommented the "make distclean" in debian/rules, and removed
		the reliance on /tmp when installing 99-barry-perms.rules
	- applied bb_task_format.txt patch from Peter Silva
	- fixed each misspelling of "recurrance" to "recurrence"
	- tweaked src/probe.cc again for paranoia's sake... start at
		offset 1 if more than 1 endpoint pair, otherwise start
		search at 0
	- split up opensync module into multiple source files, and started
		using the opensync vformat routines for parsing and building
		the vevent20 data (experimental)
2007/04/04
	- more incremental work on the opensync plugin, adding ADDED
		and MODIFIED functionality... (experimental!)
2007/03/30
	- added code to dump extra descriptors during device discovery,
		if found
	- bumped opensync version number in configure.ac, and made
		the configure scripts more consistent with the rest
		of the project
	- fixed printf-format size bug in opensync module
2007/03/29
	- applied patch from Niels de Vos, fixing deb udev rules for Pearl
	- updated AUTHORS
	- fixed extra space bug in LDIF output (added space when creating
		FullName, even if there was no last name)
	- fixed Address Book record parsing in Contact class... the
		Blackberry database uses field id 0x20 for both the
		first and last names, and if only a last name exists,
		the first name will be empty.  Fixed parser to handle
		this special case, without relying on string length.
		Thanks to Troy Engel for reporting above two LDIF bugs.
	- added a few more constants to bcharge.cc
	- renamed opensync's configure.in to configure.ac
2007/03/17
	- fixed bcharge to avoid endless reset loop... oops
2007/03/16
	- reorganized bcharge.cc to make it possible to switch between
		Pearl modes 0004 and 0001
	- added flag to BadPassword exception class, to signal whether
		the library considers the device "out of retries" or not
	- updated socket.cc for new BadPassword exception
	- added special case to Controller class destructor to reset the
		device if being destroyed in a half-open state... this is
		a temporary fix until we understand how to handle
		the "already open" message we get when opening the Desktop
		in some cases
	- added password prompt dialog to the backup GUI
	- fixed possible memory leak in GUI's DeviceInterface::Connect()
2007/03/08
	- committed Troy Engel's bbrules_mass_symlinks.patch, fixing
		udev rules for the Pearl
	- updated 10-blackberry.rules.Debian to match 10-blackberry.rules's
		functionality
	- applied Troy Engel's barry.spec patch to generate all required
		RPM's... Thank you!  Notes in the README taken from
		the sourceforge tracker entry containing the patch.
	- added libusb lib flags to tools/ and examples/ makefiles,
		and tweaked configure.ac with a better default,
		to build cleanly on RHEL 4
	- modified rpm/barry.spec:
		- does not create doc-only barry base package anymore
		- fixed "barry-backup" typo
		- removed the patch step, as version 0.7 shouldn't need it
		- added license file to each package
		- commented out console perms scripts, pending mailing list
			discussion
	- updated AUTHORS
	- applied Troy Engel's barry.spec patch to fix RHEL4 compile issues
	- fixed 80 column wrapping error in barry.spec, thanks to Troy Engel
		for the bug report
	- applied Troy Engel's udev permissions patch for Redhat/Fedora
		systems, which automatically set the ownership of a
		newly plugged in device to the currently logged in console
		user.
	- added udev/README to document what all those files are for...
		part of the text comes from the sourceforge comment
		on the above udev permissions patch from Troy Engel
	- uncommented the console perms scripts for rpm/barry.spec
	- added libglademm-2.4 to gui/README's dependency list
	- made usbwrap.* calls more threadsafe
	- added Usb::Timeout exception for timeout errors
	- added preliminary UsbSerData support to library for GPRS modem
		functionality, using Rick Scott's XmBlackBerry's serdata.c
		as a guide
	- added overloaded Socket::Send() for sending without receiving
	- added preliminary pppob command line tool
2007/03/02
	- version bump in:
		- configure.ac
		- src/Makefile.am
		- src/version.cc
		- gui/src/BackupWindow.cc (about dialog)
		- src/Doxyfile
		- rpm/barry.spec
	- build system tweaks for opensync-plugin, and added a buildgen.sh
		for it
	- added better debug messages in probe.cc and usbwrap.cc's
		device discovery code
	- changed error handling for null interface->altsetting pointers
		when doing device discovery in usbwrap.cc.  Seems that
		some devices report a higher number in bNumInterfaces
		than are really available... in this case, let's
		just ignore the missing data and assume success
	- applied udev script patch #1663986 from Troy Engel
	- applied barry-bcharge.spec patch #1672178 from Troy Engel
	- ReleaseChecklist update
	- added rpm/README based on Troy Engel's patch notes
	- updated new barry-bcharge.spec for version 0.7, removing patch
		dependency

Release: version 0.6 - 2007/02/28
------------------------------------------------------------------------------
2007/02/28
	- fixed size checks for device database records larger than 64K
		Thanks to Michael Brown for the bug report.
	- added initial release maintainer scripts
	- fixed odd backup success message in GUI when doing a backup with
		no databases selected in configuration
		Thanks to Michael Brown for the bug report.
	- added udev permissions file patch from Michael Brown
	- added Michael Brown to AUTHORS
	- updated README, gui/README, and doc/USB-capture.txt
	- added -o command line switch to bcharge.cc, and updated man page
2007/02/23
	- changed library behaviour so it only turns on libusb debug output
		if in data dump mode.  In btool, -v controls this output.
	- minor stream formatting fix in btool
	- added OpenSSL dependency to build for password hash support
	- made debug dout() output conditional on Init() flag... In btool,
		-v now controls this as well
	- reverse engineered more of the initial probe packets, and
		implemented probing in struct based code... changes include:
		- added support for "attribute fetch" packets, used at
			the beginning of USB conversations
		- defined object/attribute id codes for the PIN number
		- made Protocol::SocketCommand more robust, and implemented
			its sequence number behaviour
		- moved ModeSelectCommand into SocketCommand, as it is a
			socket 0 level command
		- added initial protocol struct: PasswordChallenge
		- renamed Barry::Packet to DBPacket
		- added ZeroPacket for socket 0 packet creation and analysis
		- Barry::Packet is now the base class for the above
		- implemented socket 0 behaviour in socket.cc
		- changed return values for Send/Receive/Packet/NextRecord
			members in the Socket class from bool to void, as they
			don't generate errors themselves, but only can
			have an error if Usb::Device throws an exception.
			Cleaned up all code that called these members as well.
		- removed "last status" from Socket class as it was unused
		- updated probe.cc to use new socket 0 implementation
		- removed two of the hard coded packet handshakes in favour
			of socket 0 packets
		- updated controller.cc:
			- uses new socket 0 implementation
			- removed "flag" hack when opening sockets and
				selecting modes, as it should use the
				socket 0 sequence number
	- added initial, incomplete prototype header for the C API
	- updated some .cvsignore files
	- updated TODO
	- updated ReleaseChecklist.txt, adding rpm spec file
	- added the following to ZeroPacket:
		- ChallengeSeed()
		- RemainingTries()
		- SocketResponse()
		- SocketSqeuence()
	- moved Command() to base Packet class
	- added comments to protostructs.h and size constants for the
		new PasswordChallenge struct
	- added password support to Socket and Controller classes
		Thanks to Rick Scott's XmBlackBerry for the openssl
		password hashing logic.
	- updated btool to use new password support, and updated its man page
2007/02/22
	- updated Doxygen input files and version, and added to ReleaseChecklist
	- fixed btool PIN output for LDIF mode, now commented in output
	- major LDIF overhaul:
		- split LDIF specific code out of the record class and
			into its own
		- fixed "full name" behaviour that added an extra space
			in dn attributes, as reported by Troy Engel
		- added support for mapping of LDIF attributes to Barry
			contact field names
		- fixed base64 handling, so attributes are only so encoded
			if necessary
		- fixed base64 attribute reading inconsistency... some
			notes fields were missed in old version if not
			encoded
		- added support for specifying alternate attribute for
			constructing a FQDN, instead of just "cn"
		- updated btool and upldif to use new features
	- large update to btool manpage
	- fixed initialization bug in Contact constructor (missed RecType)
2007/02/15
	- added ktrans.cc to make reading of kernel usbfs_snoop logs easier
	- removed commented code from translate.cc
	- added Pearl handshake support to bcharge.cc, which resets the
		Pearl so that the vendor specific 0xFF class exists.
		This should allow use of btool on the Pearl.
	- added Data::AppendHexString to data.cc
	- added better probing support for the Pearl, so it detects the
		Product ID 0x0004 mode, and does a search for class 0xFF
		instead of hardcoding it.
2007/02/10
	- applied README patch from Ian Darwin
	- minor tweaks to README
	- added missing errno.h header in src/usbwrap.cc for AMD64
		Thanks to Jonathan Hudson for reporting the bug.
	- tightened up size checks in Data::ReleaseBuffer()
	- stable libusb *does* return the actual length of the USB packet...
		fixed this in usbwrap.cc to set the actual size of read data,
		and removed the size hacks elsewhere in the code:
		probe.cc, protocol.cc, socket.cc, usbwrap.cc
2007/02/09
	- added proper return codes for error conditions in btool.cc
	- clarified some stream output code in the library, for hex/dec numbers
	- removed old, non-working connect.cc test program
	- added iomanip to debug.h
	- changed usbwrap to call libusb again if EINTR and EAGAIN
		This should fix one of the OpenBSD issues
2007/02/04
	- updated AUTHORS
	- fixed bug in barrybackup GUI that didn't create the target path
		if the user didn't do Edit | Config first.
		Thanks to Ian Darwin for reporting the bug.
	- applied gui/src/ConfigFile.cc header fix patch for OpenBSD
		from Ian Darwin
2007/02/03
	- added initial btool.1 man page from Ian Darwin
	- updated man/Makefile.am for new btool.1
	- updated AUTHORS
	- applied btool -h help clarification patch from Ian Darwin
2007/02/02
	- reworked exception hierarchy, so applications can handle all
		Barry related exceptions, including Usb errors, with
		one base class: Barry::Error
	- fixed all the ripple changes this caused throughout the codebase
	- added BadPassword exception
2007/02/01
	- version bump in:
		- configure.ac
		- src/Makefile.am
		- src/version.cc
		- gui/src/BackupWindow.cc (about dialog)
	- updated doc/ReleaseChecklist.txt
	- added usb-level breset.cc command line tool
	- fixed bug in gui/src/tarfile.* for systems where
		sizeof(int) != sizeof(void*)
		- TarFile class now uses a plugin style for the compression
			operations, to allow for threadsafe versions if needed
			in the future.
		- also fixed leaked file handle bug in open_compressed()
		- Thanks to Jonathan Hudson for reporting this for 64bit systems
	- minor signed comparison fixes in the library
	- added better protocol data dumping code in probe.cc
	- added Usb::Device::BulkDrain(), to prevent Barry from hanging
		due to pending reads

Release: version 0.5 - 2007/01/26
------------------------------------------------------------------------------
2007/01/26
	- added missing errno.h header to gui/src/util.cc
	- lots more endian fixes after testing on iMac  
	- iostream output size fixes
	- added option to btool to reset the device via software
	- beefed up exception handling in barrybackup
	- checked in opensync work-in-progress: trace logging, pointer bugfix
		this is still experimental
	- added aboutdialog.* files from gtkmm24 2.10.6, so we have a dialog
		class for systems running older versions of gtkmm, like
		Debian stable
	- uncommented the about box menu handler
	- added "cleanall" option to root buildgen.sh script
	- update ReleaseChecklist.txt
	- removed CVS auto-history strings from aboutdialog.*
2007/01/25
	- found a link between the unknown field in tagged protocol headers
		and the unknown field in RecordStateTable entries.  This
		field matters when uploading certain databases, such as
		Browser Options.  It is unknown what this field really
		means, but we're calling it RecType.  Updated the API
		to use this in all parser objects and builder objects
		and record objects that use it.
	- changed some uses of uint64_t to uint32_t, in Contact and
		Calendar record objects... unique IDs only seem to be
		32 bits
	- added new static function to record classes: GetDefaultRecType()
		This returns the default rectype that should work
		for that record.  Ideally this should be retrieved from
		the device, but in the case where a database has no
		records, this info would be good to know.
	- updated convenience template function Controller::AddRecordByType()
		to use GetDefaultRecType()
	- documented the recurrence data and how to use it in Calendar objects
	- added data debug output for incoming USB packets in the
		socket class... when we ported to the stable libusb
		we lost some of the verbose output... this should get it
		back.  (In the official release, you need to uncomment
		ddout() in debug.h for the full blast of debug output).
	- backup GUI updates:
		- changed error_done signal into a pure error signal,
			and changed the logic so the restore continues
			even if there was a protocol error on one database
		- changed status bar messages to show what's happening
			i.e. Backup or Restore
		- default to not restore the "Handheld Agent" database as
			it appears to be read-only on the device
		- added temporary Restore & Backup mode for debugging
		- added extra hyphen to backup files to show date/time better
		- updated GUI to save and restore the new RecType field
			supported now by the library
2007/01/21
	- added future considerations to doc/ReleaseChecklist.txt
	- applied big endian patch from Jonathan Hudson
	- changes to patch:
		- removed endian.h include from barry.h, since applications
			using the library should not care about endianness
		- hard coded the path to config.h in endian.h
			so that endian.h never makes it into the final
			install
		- removed DEFAULT_INCLUDES setting from src/Makefile.am
			for the same reason
		- removed config.h dependency in btool.cc and used library
			Version call instead
	- added big/little endian text to the Barry::Version call
	- updated AUTHORS
	- fixed install location of bcharge when building with ./configure;
		now goes to sbin/ for both source compile and binary packages
		Thanks to Jonathan Hudson for reporting this bug.
2007/01/20
	- added smarter timeout values to controller, and allowed
		timeout overrides in the packet, socket, and usbwrap code...
		extra timeouts are needed for erasing databases for
		some older devices
	- added an explicit DataDumpParser class to btool.cc, as the
		library doesn't always have extreme verbose debugging on...
		this makes sure anyone can always get raw database packets
		through btool, for development
	- added thread callback signals for error finishes and erase_db
		operations, so the GUI is updated properly
	- more GUI cleanups (status bar updates, etc)
	- finished implementation of GUI restore
	- fixed gtkmm/glibmm exception handling when the exceptions
		occur in sigc signal handlers... in that case,
		exceptions need to be handled with
		Glib::add_exception_handler()
	- added filename-only reading support to TarFile class
	- added pending gui/TODO items
2007/01/19
	- backup GUI now properly shows progress
	- the buttons become insensitive when backup is busy
	- refactored directory check code, and added mkdir check
		when to the backup setup (so the directory exists
		when we try to write to it)
	- updated code to use Barry::Data in new namespace
2007/01/18
	- moved Data class into Barry namespace
2007/01/13
	- updated copyright dates for the new year
	- clarified exception message in controller.cc
	- fixed pointer initialization bug in controller.cc
	- added documentation comments to parser.h and builder.h
	- updated ReleaseChecklist.txt
	- updated README
	- changed Barry library configure scripts to make better
		use of pkg-config for autodetecting dependencies
	- added initial Barry Backup GUI (gui/ directory), capable of making
		backups only at this point
2007/01/11
	- added doc/ReleaseChecklist.txt
	- added version API, returning version number and string
	- added Troy Engel to AUTHORS
	- added special case to bcharge.cc for the Blackberry Pearl,
		which doesn't reset itself after the charge handshake
		Thanks to Troy Engel for testing.
2007/01/05
	- added pkg-config support for the library (libbarry-0.pc.in)
	- fixed compile error on g++ 3.3 systems (missing stdint.h
		in probe.h)
	- fixed protocol hang at end of Controller operation... in
		controller destructor, it was deleting the USB interface
		before closing the socket at the BlackBerry level, thereby
		leaving the device in Desktop mode
2007/01/04
	- support the newer udev packages on Ubuntu, which need slightly
		different rules
	- modified bcharge.cc to search for Pearl devices too.
		USB product ID 6
	- added Pearl product ID to probe code, but likely not functional
		yet until we find someone able to get a USB capture for us
2006/12/29
	- version bump in configure.ac and src/Makefile.am

Release: version 0.4 - 2006/12/29
------------------------------------------------------------------------------
2006/12/29
	- added bcharge.cc to the tools/ directory (whoohoo!)
	- added initial release version of rpm/barry.spec (aka bcharge.spec)
		This begins the barry binary release, currently only
		including the bcharge utility, but possibly more in
		the future.  Future binary packages will likely include
		libbarry, libbarry-devel, etc, which barry will then
		depend on.
	- added udev rule script for BlackBerry devices
	- added man/ directory and bcharge.1 manpage
	- added debian/ directory for building deb packages, with initial
		package scripts
	- added rpm/make-rpm-tarball.sh for building RPMs
	- split out technical docs into separate libbarry.docs file for
		a future Debian install
	- added more cleaning to buildgen.sh
	- added new udev rule file for Debian stable
	- hardcoded g++ to 3.3 in debian/rules as I have multiple versions
		on my system and need to compile releases with stable
2006/12/21
	- ported Barry to use the stable branch of libusb
		NOTE: no longer depends on the devel libusb tarball!
			Just use your distro's libusb packages.
	- fixed more endian issues
	- minor update to TODO
2006/12/15
	- moved Exceptions, Hacking, and VersionNotes to doc/
	- added doc/USB-capture.txt
2006/12/08
	- added Controller::AddRecord() and template helper
	- added beginning version of generic RecordFetch<> template
	- set default of Barry::Init() to false (no data dump mode)
	- added examples/ directory, with first addcontact.cc example
2006/12/07
	- added autoconf support based on Peter McAlpine's patch
	- renamed Makefiles to Makefile.orig and added script to turn
		on old build system if wanted
	- fixed boost-specific error path in btool
	- moved platform specific code out of time.h and into time.cc
	- moved btool.cc, translate.cc, and upldif.cc out of src/ and
		into their own tools/ subdirectory
	- added NEWS file to make autotools happy
	- added a "clean" option to the buildgen.sh script... maintainer's
		use only
	- reworked autoconf and automake files, to support
		barry as a library, to move the programs into their
		own tools directory, and support a proper installation
	- fixed headers in parser.h, btool.cc, and upldif.cc to work
		properly when installed standalone
	- added tools/Makefile.plain for testing compiling against
		installed barry library
	- added commentary on version number system
	- removed Makefile.conf and Makefile.orig, as new autoconf
		system supercedes it
	- added support for boost serialization library in autoconf build
	- added library version number to autoconf build
	- changed boost flag to __BARRY_BOOST_MODE__ to avoid collisions
	- removed debug.h dependency from btool.cc
	- removed libusb check in favour of specific --with-libusb
		option... may need to revisit this later
	- quick installation update in README
2006/12/01
	- fixed some missed endian conversions in record.cc and added
		some size checks
	- fixed endian issues in time.h
	- added 2 more functions to the time zone API, and adjusted
		the time zone table for better defaults in North America
	- added btool and upldif to the make install sequence
	- added support for Calendar recurrence data
	- small doc/TimeZones.txt update
2006/11/24
	- added BlackBerry time zone code list, reverse engineered from a 7750
	- added GetTimeZone() to convert device time zone codes to useful data

Release: version 0.0.3 - 2006/11/24
------------------------------------------------------------------------------
2006/11/23
	- added return code check to Controller::SaveDatabase()
	- fixed Data() class constructor, so it doesn't auto-convert
		from any int
	- fixed size checking bug in Packet::ReturnCode() that caused
		uploading to device to fail
2006/11/10
	- added Exceptions doc file, documenting the C++ exceptions used,
		and their hierarchy
	- fixed small bug in 'make install' which didn't build first
	- minor documentation and cleanup in upldif.cc
	- added utility functions to the RecordStateTable class,
		GetIndex() and MakeNewRecordId()
	- changed btool so that the -d command modifiers can be
		specified multiple times to work with multiple records
		at once
	- added Calendar sync code to the opensync module (not complete)
	- cleaned up exception handling in the opensync module, making
		more use of the base exception to make sure no
		exceptions leak into the C library code

Release: version 0.0.2 - 2006/10/12
------------------------------------------------------------------------------
2006/10/12
	- fixed casting error in opensync module
	- minor updates to documentation to prepare for release
2006/09/29
	- added stdint.h to parser.h for uint32_t.  Thanks Ron Gage for
		the bug report
2006/09/08
	- large refactoring of the packet parsing and building code,
		splitting the code into 3 groups:
		- record: handles record specific parsing and building...
			this is mostly subfields with CommonField structs
			as their headers, but sometimes has a specific
			header of its own, in the case of email
			Note: email's header is as yet undecoded.
			Record does not know the details of the packet
			formats, only the formats of its own record data.
		- packet: handles building of complete command packets
			and handles parsing of commonly used header values,
			providing an API for it... packet does not know
			the record format details, but does know the
			details of each Database Operation (protocol.h)
			packet format.
			So far, it seems that there is a real separation
			of operation formats and record formats, with the
			record formats being the same even with different
			database operation codes (GET_RECORDS /
			OLD_GET_RECORDS), which was not confirmed before.
			See the header size of the email record after
			refactoring.
		- controller: handles device state, and the management of
			sockets, commands, and checking for response values.
			The Controller object does not know the format
			of either the record or the packet it is sending,
			but does know the protocol handshake logic used
			to talk to the device.
	- implemented SetRecord (SET_RECORD_BY_INDEX)... syncing, here
		we come!
	- spelling correction in opensync-plugin/AUTHORS
2006/09/01
	- added sample hotplug scripts
	- added .cvsignore files for doxygen and opensync directories
	- added src/endian.h... still need to add configure support to
		handle non-little-endian machines
	- added exception handler in opensync plugin commit_change()
	- removed the device reset code in probe.cc, as resetting a device
		can renumber the devices in /proc on kernel 2.4.x,
		and cause a failure to reach the device...
		FIXME - this should be changed someday to reset if probing
		fails, and restart the probe on reset, as sometimes
		the blackberry devices respond differently when not reset
		Ideally, the probe protocol should be properly reverse
		engineered.
	- added support for retrieving record state table, which is needed
		for smarter syncing
	- added support for retrieving, deleting, and clearing the dirty
		flags of individual blackberry device records
	- added endian macros throughout the code
2006/07/13
	- added opensync-plugin to root Makefile's clean
	- updated time conversion calls to match opensync's latest SVN
	- added opensync_change_set_changetype() (only add for now,
		for development)
	- removed slow sync functions for now
2006/07/07
	- added quick "install" makefile target, to src/install by default
	- added static library target... this is temporary until autoconf
		stuff is added properly... needed for the opensync plugin
	- documented in comments that Barry::BError is intended to be
		the base classes for all exceptions
	- added first round of implementation of an opensync plugin, based
		on the example plugin code from the opensync sources
2006/06/22
	- added to Contact record class:
		- Clear()
		- ReadLdif() to load and parse LDAP data
	- added fragmented send support to Socket class
	- added Probe::FindActive() to make client programs more streamlined
	- fixed hex/decimal printing of record counts in btool
	- added upldif.cc, a utility to take ldapsearch output on stdin
		and upload it to a blackberry
	- updated src/.cvsignore
2006/06/16
	- added parsing of service book fields:
		- old and new name
		- old and new unique ID (UID)
		- content ID (CID)
		- old and new description
		- DSID
		- bes domain / domain
	- date change in legal.txt
	- added initial parsing of ServiceBook field 0x09, and calling it
		ServiceBookConfig for now, for lack of a better name
	- added parsing for ServiceBook field 0x02 on 72xx Blackberries...
		seems to be a name or description, but doesn't appear
		in the device's own GUI... called "Hidden Name" for now
2006/06/09
	- added ServiceBook record class and parser code, based on some
		of Ron Gage's reverse engineering... code is by Chris Frey
	- added AUTHORS file
	- fixed the libusb set_configuration/claim_interface order
		bug in controller.{h,cc}... already fixed in probe,
		but not controller.  Thanks Ron Gage for finding this.
2006/05/25
	- renamed Changelog to ChangeLog in preparation for autoconf
	- renamed Todo to TODO in preparation for autoconf
2006/05/18
	- make clean cleans up tests properly now
2006/03/31
	- turned source code browsing on in Doxyfile
	- added LoadDatabaseByName() and LoadDatabaseByType() template members
		to the Controller class
		- new file: controllertmpl.h
	- documentation fixes in builder.h
	- added static GetDBName() functions to all record classes, in
		support of the template Controller functions
	- fleshed out DatabaseDatabase::GetDBNumber() and GetDBName(),
		returning errors properly
	- documented sample btool.cc code better, and added example
		of Controller template member usage
2006/03/29
	- copyright dates updated for 2006
2006/01/05
	- backed out update to latest libusb DEVEL tree, since it is buggy.
		Stick with libusb 2005/11/26
2005/12/30
	- added clean target to convenience Makefile
	- added Boost to list of dependencies in README
	- fixed minor compile warnings in base64.cc
	- fixed new USB discovery code, and changed endpoint usage to use
		it, instead of the READ_ENDPOINT and WRITE_ENDPOINT
		constants... constants are now removed
		common.h, controller.cc, probe.cc, probe.h, usbwrap.cc
	- added ClearHalt() to Usb::Device (usbwrap.cc)
	- updated usbwrap.h to match latest libusb CVS devel tree
	- updated README to refer to 2005/12/30 libusb CVS devel tree
	- added roadmap to Todo list
2005/12/29
	- added convenience Makefile in root directory
	- added Hacking document
	- minor touchups to README
	- added caution warning to README, since this release will support
		delete / overwrite / upload functionality
	- minor compile order change in Makefile (speed reasons)
	- added dynamic endpoint discovery to probe.cc
	- changed claim_interface/set_configuration() function call order in
		probe.cc based on feedback on the libusb mailing list
	- added USB discovery code to usbwrap.{h,cc}
2005/12/23
	- fixed packing bug in new upload header struct
	- renamed CommonField union from data to u to be consistent
	- added return_code field to DBAccess struct, for error checking
	- added response checking during upload: if response is non-zero
		throw exception in controller.cc
	- added sorting operators to record parser classes... when writing
		contact data to the device, it may be important to write
		group link items last, since they reference other contacts...
		This needs to be tested, and if not required, removed.
	- added GROUP_FLAG field code to Contact parser class
	- fixed offset bug in Contact and Calendar Build() functions
	- fixed name bug in Contact::Build(), now output only with data
	- added appointment type flag support to Calendar record parser
		class, and "all day event" flag support
2005/12/22
	- added autoconf to Todo list
	- refactored the protocol structures so that record structs can
		be reused for upload and download
	- with new protostructs, more header control is handled by
		controller.cc instead of record.cc parsers and builders
	- parser code now accepts an offset, to govern start of record data
	- changed Data sizes from int to size_t and removed casts
	- removed unneeded Parser::GetHeaderSize() (new protostructs make
		this obsolete)
	- added Calendar::Build() for calendar uploads
2005/12/10
	- added s11n-boost.h serialization templates for boost::serialization
	- added boost::serialization to build
	- minor change in usbwrap.cc to display error codes in decimal
	- added SizePacket special case code to Socket::Send()... this is
		required when uploaded packet size is a multiple of 0x40,
		a special 3 byte size packet is sent
	- moved some record class variables to public: so they can be
		properly serialized
	- fixed variable name but in RecordBuilder template
	- added -f switch to btool, for saving and loading of record data
	- added -s switch to btool, for uploading saved data back to handheld
	- added Controller::SaveDatabase()
2005/12/08
	- fixed potential casting / pointer bug in controller.cc
	- added builder.h, to support uploading
	- minor comment fixes in parser.h
	- added preliminary Contact protocol record building support
	- fixed field order bug in ContactRecord protocol struct
	- Contact record.h class now saves unknown Group Link field,
		for later saving
2005/12/07
	- added -fno-strict-aliasing to compiler flags so gcc-4.0.x won't
		optimize away protocol struct casts
		see: 
		http://gcc.gnu.org/bugzilla/show_bug.cgi?id=25235
		http://mail-index.netbsd.org/tech-kern/2003/08/11/0001.html
		http://groups.google.ca/group/comp.lang.c++.moderated/ \
			browse_thread/thread/e7bf096832526f8e/5714701b \
			02a2a3cc?hl=en#5714701b02a2a3cc
	- changed headers so that any low level protocol-specific sizes and
		structs are completely hidden in the library...
		this adds library-only header: protostructs.h

Release: version 0.0.1 - 2005/11/25
------------------------------------------------------------------------------
2005/11/25
	- added barry.h for documentation purposes and application usage
	- updated README for release
	- renamed SBError exception class to BError
	- updated Doxyfile to version 1.4.5
	- added more doxygen comments
2005/11/24
	- added conversion routines (and tests) between time_t and min1900_t
	- added -v option to btool to dynamically control protocol dumping
	- removed duplicated database database table display in controller.cc
	- minor spelling corrections
	- added copyright to usbwrap.{h,cc} as per earlier meeting
	- added support for Old protocol Calendar entries
2005/11/20
	- added legal.txt, to save typing when adding new source files
	- ignore test-base64 file (cvsignore)
	- added contact-to-ldif generation, and updated supporting code
	- added argument to btool to support contact-to-ldif operation
	- added Contact::GetPostalAddress()
	- added README documentation in preparation for future release
2005/11/19
	- added parser.{h,cc} virtual wrapper to generalize LoadDatabase()
	- added code to socket.cc's Packet() command to re-receive on
		reception of empty packets... this seems to be a signal
		from the device that it needs more time for long transfers
		Current limit: 10 blank packets before exception is thrown
		Observed maximum blank count: 1
	- added MessageRecord and OldMessageRecord to protocol.h
	- changed common record field structs to one CommonField struct
	- increased default USB timeout to 10 seconds (some loaded devices
		seem to need more time...)
	- reorganized record.{h,cc} to try to reduce the code duplication
	- record.h classes now "know" the sizes of their corresponding
		protocol structs... this may cause trouble down the line
		with Python, if used(?)
	- added Message class for Email records
	- removed the "Get*" database functions and replaced with
		general LoadDatabase() call, which loads any database
		available, and parses it with a Parser object
	- added GetDBID() for searching for database numbers via name
	- added test code to retrieve and display all email
	- cleaned up comments
	- renamed blackberry.{h,cc} to controller.{h,cc}
	- renamed bbtool.cc to btool.cc
	- added Makefile.conf
	- added copyright notices to source files
	- added COPYING file with GPL
	- put parser in Barry namespace, and added auto_ptr-like mode for
		store object pointers
	- added doxygen docs
	- added header comments to convo.awk script
	- removed Test() function in Controller object, and made class
		better suited to its general API purpose
	- changed OpenMode() so it loads command table and DBDB... it is now
		a public API function
	- moved Controller test code to btool.cc and made tool more
		generically useful... can now download any DB by name on
		the command line
	- added mode checks to Controller
	- added -t and -d command line options to btool
	- added base64 routines from John Walker / Fourmilab and Citadel/UX
	- converted base64 routines into an API, instead of hardcoded
		file based
2005/11/18
	- changed project name to Barry, including namespaces
	- renamed sbcommon.* to common.*
	- increased USB default timeout to 2 seconds
	- fixed formatting bug in Data operator<< output
	- cleaned up the protocol packet structs, getting rid of the
		confusing param/simple split... param is now the tableCmd
		from the Command Table
	- moved protocol structs from record.h to protocol.h
	- added support for older version of the USB protocol, which matches
		the Cassis spec more closely
	- fixed the hardcoded offsets in blackberry.cc's protocol parsing
	- fixed Socket::Close() so on error, socket flags are reset.
		This stops Close() from being called twice on exception
		destructors
2005/11/17
	- added Doxyfile to the project
	- tuned Makefile
	- added mode selection support to Blackberry class (RIM Desktop,
		RIM Bypass, and RIM_JavaLoader)
		Mode selection governs which socket is used in subsequent
		data transfers.
	- added Command Table parsing and protocol support
		Blackberry class, and CommandTable record class
	- added Database database parsing and protocol support
		Blackberry class and DatabaseDatabase record class
	- added Address book retrieval support - dumps data to stdout for now
	- fixed bug in CopyOnWrite mode in Data class, where could allocate
		less buffer than data copied
	- added "easy exception" debug output macro
	- fixed minor spelling error in protocol.cc
	- fixed ModeSelectCommand protocol structure - it is not a parameter
		command, but uses the unknown slots for socket and flag
		data
	- removed hardcoded socket numbers from protocol.h
	- fixed bug in socket.cc:Open() where packet size was not properly
		saved
	- implemented socket::Close()
	- fixed sequence number checks, so it is reset properly on socket 0
	- added Socket::NextRecord() for multiple record data transfers
	- fixed input handling bug in translate.cc
2005/11/11
	- added .cvsignore files to project
	- added README notes to document the source architecture
	- added dbsetup data script, which shows how to get into database
		mode, using the RIM Desktop mode, and open a socket
	- added blackberry.{h,cc} class
	- added command line parameters to bbtool.cc
		-l = list only
		-p = specify pin of blackberry device
	- added blackberry test code in bbtool.cc - debugging the initial
		opening protocol: sockets, modes, etc... see dbsetup for
		results
	- added copy-on-write functionality to Data class, so it can be used
		with plain data buffers with little performance impact
	- added eout() and ddout() debugging - to separate:
		- regular debug output
		- exception debug output (should probably be logged to
			syslog someday, and never turned off)
		- raw data dump output
	- changed errno SBError exception handler to try to decode the error
		numbers into english (limited success)
	- fixed probe and socket USB Bulk message handling, so they don't
		use PollCompletions(), but use IO::Wait() (libusb_io_wait())
	- added common packet size checker in protocol.cc
	- fixed unpacked protocol packet structs... using gcc's
		__attribute__ ((packed)) ... see protocol.h
	- added ModeSelectCommand structure (protocol.h)
	- finished Socket::Open() call  (Close() not yet implemented)
	- moved Socket::Send/Receive() out of private, as they can be used
		for socket 0 operations.
	- cleaned up pointer management with macros:
		MAKE_PACKET()
		COMMAND()
		IS_COMMAND()
	- added IO::Wait() and IO::Cancel() to correspond with libusb API
	- added datadumping in usbwrap for easy protocol capture
	- added preliminary record.{h,cc} classes
	- added Contact record parsing, and test code
2005/10/20
	- syncberry tree started

